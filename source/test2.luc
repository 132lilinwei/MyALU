module test2 (     //Testmode1: give give specific input to ALU unit and check its output with manually defined answer
    input clk,  // clock
    input rst,  // reset
    input result_to_check[8],            //check the result of ALU unit 
    input z_to_check,
    input v_to_check,
    input n_to_check,
    output a[8],                        //give input to ALU
    output b[8],
    output alufn[6],
    output pass                         //indicate whether pass or not
  ) {
  .clk(clk){
    .rst(rst) {
      fsm myFsm = {FORCE, ADD, SUB, MUL, AND, OR, XOR, LDR, SHL, SHR, SRA, RL, RR, CMPEQ, CMPLT,CMPLE};
      fastblinker blin;
    }
  }

  always {                  //initialize
    a = 8h00;
    b = 8h00;
    alufn = 6b000000;
    pass = 0;

    if (myFsm.q == myFsm.ADD) {              //check different cases
      alufn = 6b000000;
      a = 8b11111111;
      b = 8b10000000;
      if (z_to_check == 0 && v_to_check == 1 && n_to_check == 0 && result_to_check == 8b01111111) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.SUB;
    }
    if (myFsm.q == myFsm.SUB) {
      alufn = 6b000001;
      a = 8b11111111;
      b = 8b10000000;
      if (z_to_check == 0 && v_to_check == 0 && n_to_check == 0 && result_to_check == 8b01111111) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.MUL;
    }
    if (myFsm.q == myFsm.MUL) {
      alufn = 6b000010;
      a = 8b00000011;
      b = 8b00000011;
      if (result_to_check == 8b00001001) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.AND;
    }
    if (myFsm.q == myFsm.AND) {
      alufn = 6b011000;
      a = 8b10010011;
      b = 8b10000011;
      if (result_to_check == 8b10000011) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.OR;
    }
    if (myFsm.q == myFsm.OR) {
      alufn = 6b011110;
      a = 8b01010111;
      b = 8b10101011;
      if (result_to_check == 8b11111111) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.XOR;
    }
    if (myFsm.q == myFsm.XOR) {
      alufn = 6b010110;
      a = 8b01010111;
      b = 8b10101011;
      if (result_to_check == 8b11111100) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.LDR;
    }
    if (myFsm.q == myFsm.LDR) {
      alufn = 6b011010;
      a = 8b01010111;
      b = 8b10101011;
      if (result_to_check == 8b01010111) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.SHL;
    }
    if (myFsm.q == myFsm.SHL) {
      alufn = 6b100000;
      a = 8b01010111;
      b = 8b00000011;
      if (result_to_check == 8b10111000) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.SHR;
    }
    if (myFsm.q == myFsm.SHR) {
      alufn = 6b100001;
      a = 8b01010111;
      b = 8b00000011;
      if (result_to_check == 8b00001010) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.SRA;
    }
    if (myFsm.q == myFsm.SRA) {
      alufn = 6b100011;
      a = 8b10010111;
      b = 8b00000010;
      if (result_to_check == 8b11100101) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.RL;
    }
    if (myFsm.q == myFsm.RL) {
      alufn = 6b100100;
      a = 8b11001011;
      b = 8b00000010;
      if (result_to_check == 8b00101111) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.RR;
    }
    if (myFsm.q == myFsm.RR) {
      alufn = 6b100101;
      a = 8b01010111;
      b = 8b00000010;
      if (result_to_check == 8b11010101) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.CMPEQ;
    }
    if (myFsm.q == myFsm.CMPEQ) {
      alufn = 6b110011;
      a = 8b10000010;
      b = 8b00000010;
      if (result_to_check == 8b00000000) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.CMPLT;
    }
    if (myFsm.q == myFsm.CMPLT) {
      alufn = 6b110101;
      a = 8b10000010;
      b = 8b00000010;
      if (result_to_check == 8b00000001) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.CMPLE;
    }
    if (myFsm.q == myFsm.CMPLE) {
      alufn = 6b110111;
      a = 8b10000010;
      b = 8b00000010;
      if (result_to_check == 8b00000001) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.FORCE;
    }
    if (myFsm.q == myFsm.FORCE) {               //it's a forced error state
      alufn = 6b100100;   //rotateleft b should be smaller than 8
      a = 8b10000010;
      b = 8b00001001;     //if rotate more that 8digits. all digits will be zero. But intuitively, it shouldn't be.
      if (result_to_check == 8b00000101) pass = 1;
      if (blin.check == 0) myFsm.d = myFsm.ADD;
    }
  }
}
