/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg btn;
  
  wire [8-1:0] M_led_help_led;
  reg [4-1:0] M_led_help_num;
  ledhelper_1 led_help (
    .num(M_led_help_num),
    .led(M_led_help_led)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_de_out;
  reg [1-1:0] M_edge_de_in;
  myEdge_detector_3 edge_de (
    .clk(clk),
    .in(M_edge_de_in),
    .out(M_edge_de_out)
  );
  localparam MANUAL_version = 2'd0;
  localparam AUTO_version = 2'd1;
  localparam CASES_version = 2'd2;
  
  reg [1:0] M_version_d, M_version_q = MANUAL_version;
  wire [8-1:0] M_myAutoTester_a;
  wire [8-1:0] M_myAutoTester_b;
  wire [6-1:0] M_myAutoTester_alufn;
  wire [4-1:0] M_myAutoTester_mode_code;
  test_4 myAutoTester (
    .clk(clk),
    .rst(rst),
    .a(M_myAutoTester_a),
    .b(M_myAutoTester_b),
    .alufn(M_myAutoTester_alufn),
    .mode_code(M_myAutoTester_mode_code)
  );
  wire [8-1:0] M_myAutoTester2_a;
  wire [8-1:0] M_myAutoTester2_b;
  wire [6-1:0] M_myAutoTester2_alufn;
  wire [1-1:0] M_myAutoTester2_pass;
  reg [8-1:0] M_myAutoTester2_result_to_check;
  reg [1-1:0] M_myAutoTester2_z_to_check;
  reg [1-1:0] M_myAutoTester2_v_to_check;
  reg [1-1:0] M_myAutoTester2_n_to_check;
  test2_5 myAutoTester2 (
    .clk(clk),
    .rst(rst),
    .result_to_check(M_myAutoTester2_result_to_check),
    .z_to_check(M_myAutoTester2_z_to_check),
    .v_to_check(M_myAutoTester2_v_to_check),
    .n_to_check(M_myAutoTester2_n_to_check),
    .a(M_myAutoTester2_a),
    .b(M_myAutoTester2_b),
    .alufn(M_myAutoTester2_alufn),
    .pass(M_myAutoTester2_pass)
  );
  
  wire [8-1:0] M_myALU_out;
  wire [1-1:0] M_myALU_z;
  wire [1-1:0] M_myALU_v;
  wire [1-1:0] M_myALU_n;
  reg [6-1:0] M_myALU_mode;
  reg [8-1:0] M_myALU_a;
  reg [8-1:0] M_myALU_b;
  aluCompute_6 myALU (
    .mode(M_myALU_mode),
    .a(M_myALU_a),
    .b(M_myALU_b),
    .out(M_myALU_out),
    .z(M_myALU_z),
    .v(M_myALU_v),
    .n(M_myALU_n)
  );
  
  reg [5:0] lol;
  
  always @* begin
    M_version_d = M_version_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_edge_de_in = io_button[0+0-:1];
    btn = M_edge_de_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'he;
    io_seg[4+0-:1] = 1'h0;
    io_seg[5+0-:1] = 1'h0;
    io_seg[0+0-:1] = 1'h0;
    io_seg[1+0-:1] = 1'h0;
    io_seg[6+0-:1] = 1'h0;
    M_led_help_num = 4'hf;
    M_myAutoTester2_result_to_check = M_myALU_out;
    M_myAutoTester2_z_to_check = M_myALU_z;
    M_myAutoTester2_v_to_check = M_myALU_v;
    M_myAutoTester2_n_to_check = M_myALU_n;
    if (btn == 1'h1) begin
      if (M_version_q == MANUAL_version) begin
        M_version_d = AUTO_version;
      end
      if (M_version_q == AUTO_version) begin
        M_version_d = CASES_version;
      end
      if (M_version_q == CASES_version) begin
        M_version_d = MANUAL_version;
      end
    end
    if (M_version_q == MANUAL_version) begin
      M_myALU_mode = io_dip[16+2+5-:6];
      M_myALU_a = io_dip[8+7-:8];
      M_myALU_b = io_dip[0+7-:8];
      lol = io_dip[16+2+5-:6];
      if (io_dip[0+7-:8] > 3'h7 && (lol == 6'h24 || lol == 6'h25 || lol == 6'h20 || lol == 6'h21 || lol == 6'h23)) begin
        io_seg = 8'hff;
        io_seg[3+0-:1] = 1'h0;
        io_seg[4+0-:1] = 1'h0;
        io_seg[6+0-:1] = 1'h0;
        io_seg[5+0-:1] = 1'h0;
        io_seg[0+0-:1] = 1'h0;
      end
      if (lol != 6'h00 && lol != 6'h01 && lol != 6'h02 && lol != 6'h18 && lol != 6'h1e && lol != 6'h16 && lol != 6'h1a && lol != 6'h20 && lol != 6'h21 && lol != 6'h23 && lol != 6'h33 && lol != 6'h35 && lol != 6'h37 && lol != 6'h25 && lol != 6'h24) begin
        io_seg = 8'hff;
        io_seg[2+0-:1] = 1'h0;
        io_seg[4+0-:1] = 1'h0;
        io_seg[6+0-:1] = 1'h0;
        io_seg[5+0-:1] = 1'h0;
        io_seg[0+0-:1] = 1'h0;
        io_seg[1+0-:1] = 1'h0;
      end
      io_led[16+7-:8] = M_myALU_out;
      io_led[8+7+0-:1] = M_myALU_z;
      io_led[8+6+0-:1] = M_myALU_v;
      io_led[8+5+0-:1] = M_myALU_n;
    end else begin
      if (M_version_q == AUTO_version) begin
        M_myALU_mode = M_myAutoTester_alufn;
        M_myALU_a = M_myAutoTester_a;
        M_myALU_b = M_myAutoTester_b;
        io_led[8+7-:8] = M_myAutoTester_a;
        io_led[0+7-:8] = M_myAutoTester_b;
        io_led[16+7-:8] = M_myALU_out;
        M_led_help_num = M_myAutoTester_mode_code;
        io_seg = M_led_help_led;
      end else begin
        M_myALU_mode = M_myAutoTester2_alufn;
        M_myALU_a = M_myAutoTester2_a;
        M_myALU_b = M_myAutoTester2_b;
        io_led[8+7-:8] = M_myAutoTester2_a;
        io_led[0+7-:8] = M_myAutoTester2_b;
        io_led[16+7-:8] = M_myALU_out;
        if (!M_myAutoTester2_pass) begin
          M_led_help_num = 4'hf;
          io_seg = M_led_help_led;
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_version_q <= 1'h0;
    end else begin
      M_version_q <= M_version_d;
    end
  end
  
endmodule
